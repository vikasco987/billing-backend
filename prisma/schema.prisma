generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===================== ENUMS =====================

enum Role {
  USER
  user
  ADMIN
  admin
  SELLER
  seller
}

enum FieldType {
  INPUT
  SELECT
  CHECKBOX
  RADIO
  FILE
}

// ===================== CATEGORY =====================

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  parentId  String?    @db.ObjectId
  parent    Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Category[] @relation("Subcategories")
  items     Item[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// ===================== ITEM =====================

model Item {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float?
  mrp           Float?
  purchasePrice Float?
  sellingPrice  Float?
  gst           Float?
  discount      Float?
  stock         Int?
  openingStock  Int?
  currentStock  Int?
  reorderLevel  Int?
  unit          String?
  barcode       String?
  brand         String?
  model         String?
  size          String?
  color         String?
  variants      Json?
  imageUrl      String?
  gallery       String[]
  categoryId    String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String
  user          User           @relation(fields: [userId], references: [clerkId])
  purchases     PurchaseItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// ===================== PARTY =====================

model Party {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String    @unique
  address    String?
  dob        DateTime?
  
  // ✅ Store Clerk User ID of the creator
  createdBy  String
  user       User?     @relation(fields: [createdBy], references: [clerkId])

  // ✅ Relation to bills (if this customer is billed)
  bills      Bill[]

  createdAt  DateTime  @default(now())
}


// ===================== PRODUCT =====================

model Product {
  id    String        @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float
  bills BillProduct[]
}

// ===================== BILL =====================

model Bill {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  customerId    String?       @db.ObjectId
  customer      Party?        @relation(fields: [customerId], references: [id])
  products      BillProduct[]
  total         Float
  discount      Float?
  gst           Float?
  grandTotal    Float?
  paymentStatus String?
  paymentMode   String?
  notes         String?
  dueDate       DateTime?

  // ✅ New company fields added
  companyName    String?
  companyAddress String?
  companyPhone   String?
  contactPerson  String?
  logoUrl        String?
  signatureUrl   String?
  websiteUrl     String?

  payments      Payment[]
  history       BillHistory[]
  createdAt     DateTime      @default(now())
}

// ===================== BILLPRODUCT =====================

model BillProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  billId    String   @db.ObjectId
  productId String   @db.ObjectId
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product   Product? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quantity  Int
  price     Float
  discount  Float?
  gst       Float?
  total     Float?
}

// ===================== BILL HISTORY =====================

model BillHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  billId    String   @db.ObjectId
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  snapshot  Json
  createdAt DateTime @default(now())
}

// ===================== PAYMENT =====================

model Payment {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  billId String   @db.ObjectId
  bill   Bill     @relation(fields: [billId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  amount Float
  mode   String
  paidAt DateTime @default(now())
}

// ===================== PURCHASE =====================

model Purchase {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String
  userId      String
  user        User           @relation(fields: [userId], references: [clerkId])
  totalAmount Float
  invoiceNo   String?
  status      String?
  items       PurchaseItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PurchaseItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  purchaseId String   @db.ObjectId
  itemId     String   @db.ObjectId
  quantity   Int
  price      Float
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item       Item     @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// ===================== USER =====================

model User {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String            @unique
  clerkId   String            @unique
  role      Role              @default(USER)
  bills     Bill[]
  items     Item[]
  forms     Form[]
  profiles  BusinessProfile[]
  uploads   Upload[]
  purchases Purchase[]
  parties   Party[]
}

// ===================== FORM =====================

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  fields    Field[]
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  formId    String    @db.ObjectId
  form      Form      @relation(fields: [formId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  label     String
  type      FieldType
  required  Boolean   @default(false)
  options   String[]
  value     String?
  values    String[]
  fileUrl   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ===================== BUSINESS PROFILE =====================

model BusinessProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  user               User     @relation(fields: [userId], references: [clerkId])
  businessType       String?
  businessName       String?
  businessTagLine    String?
  contactPersonName  String?
  contactPersonPhone String?
  contactPersonEmail String?
  upi                String?
  googleReviewUrl    String?
  profileImageUrl    String?
  logoUrl            String?
  signatureUrl       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// ===================== UPLOAD =====================

model Upload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  imageUrl  String
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
