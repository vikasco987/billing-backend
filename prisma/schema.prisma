generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===================== ENUMS =====================

enum Role {
  USER
  user
  ADMIN
  admin
  SELLER
  seller
}

enum FieldType {
  INPUT
  SELECT
  CHECKBOX
  RADIO
  FILE
}

// ===================== USER =====================

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  clerkId  String   @unique          // Clerk userId
  role     Role     @default(USER)

  bills    Bill[]
  items    Item[]        // each user can own many items
  forms    Form[]        // each user can own many forms
}

// ===================== BILLING & E-COMMERCE MODELS =====================

model Product {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float
  bills BillProduct[]
}

model Bill {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  products  BillProduct[]
  total     Float
  createdAt DateTime    @default(now())
}

model BillProduct {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  billId    String @db.ObjectId
  productId String @db.ObjectId
  bill      Bill    @relation(fields: [billId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  parentId  String?    @db.ObjectId
  parent    Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Category[] @relation("Subcategories")
  items     Item[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Item {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?

  // üè∑ Pricing
  mrp           Float?            // Maximum Retail Price
  purchasePrice Float?            // Buying price
  sellingPrice  Float?            // Selling price (could default to mrp if not given)
  gst           Float?            // GST percentage
  discount      Float?            // Flat discount value or percent

  // üì¶ Inventory
  openingStock  Int?              // Opening balance
  currentStock  Int?              // Live stock
  reorderLevel  Int?              // Alert when stock < reorderLevel
  unit          String?           // Piece, Kg, Litre, etc.
  barcode       String?           // Barcode or SKU

  // üé® Product details
  brand         String?
  model         String?
  size          String?
  color         String?

  // üñº Images
  imageUrl      String?  @map("image")
  gallery       String[] // multiple image URLs if needed

  // üîó Relations
  categoryId    String   @db.ObjectId
  category      Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId        String   // Clerk userId
  user          User     @relation(fields: [userId], references: [clerkId])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


// ===================== DYNAMIC FORM MODELS =====================

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  fields    Field[]

  userId    String   // ‚úÖ store Clerk ID as string
  user      User     @relation(fields: [userId], references: [clerkId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  formId    String   @db.ObjectId
  form      Form     @relation(fields: [formId], references: [id])

  label     String
  type      FieldType
  required  Boolean  @default(false)
  options   String[]
  value     String?
  values    String[]
  fileUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
